---
title: Actions and Routing
order: 1
intro: >
  Actions are classes that handle routing and handling an HTTP request. Actions
  are typically used to save and read data from the database, and return
  HTML/JSON, or handle redirects. Actions can also have callbacks that help with
  authentication, authorization, and more.
---

## Routing

Unlike many frameworks, there is no separate routes file. Actions declare which route it handles in the class itself.

You can route to an action by using `get`, `put`, `post` and `delete` macros

```crystal
class Users::Index < BaseAction
  # GET requests to the /users path are handled by this action
  get "/users" do
    render_text "List of users goes here"
  end
end
```

## Path Parameters

Sometimes you want to name certain parts of the path and access them as parameters.

```crystal
class Users::Show < BaseAction
  get "/users/:my_user_id" do
    render_text "User with an id of #{my_user_id}"
  end
end
```

In this example if you visited `/users/123` then it would return a text response of `User with an id of 123`.

When you use `:name_of_param` then anything you pass in that part of the URL will be available in the `name_of_param` method. You can also access the param with `params.get(:name_of_param)` but it’s better to use the generated method so that you know it exists at compile time.

### You can use as many parameters as you want

Every named parameter will have a method generated for it that so that you can access the value. You can have as many as you want

For example, `delete “/projects/:project_id/tasks/:id"` would have a `project_id` and `id` method generated on the class for accessing the named parameter

## Where to Put Actions

Actions go in `src/actions` and follow the structure of the class.

For example `Users::Show` would go in `src/actions/users/show.cr` and `Api::V1::Users::Delete` would go in `src/actions/api/v1/users/delete.cr`

## Automatically generate RESTful routes

REST is a way to make access to resources more uniform. It consists of the following types

* Index - show a list of resources
* Show - show one instance of a resource
* New - typically used to render a form to create a resource
* Create - create a resource. Usually means saving data to the database
* Edit - typically used to render a form to edit an existing resource
* Update - update an existing resource
* Delete - delete the resource

Use the `action` and `nested_action` macros to generate routes automatically

```crystal
class Users::Show < BaseAction
  # Same as:
  #   get "/users/:id"
  action do
    render_text "The user with id of #{id}"
  end
end
```

Or if you have a nested resource

```crystal
class Projects::Users::Index < BaseAction
  # Same as:
  #   get "/projects/:project_id/users"
  nested_action do
    render_text "Render list of users in project #{project_id}"
  end
end
```

Namespaces are handled automatically

```crystal
# Anything before `Projects` will be treated as a namespace
class Admin::Projects::Users::Index < BaseAction
  # Same as:
  #   get "/admin/projects/:project_id/users"
  action do
    render_text "Render list of users in project #{project_id}"
  end
end
```


### More example of automatically generated routes

For the `action` macro:

*  `Users::Index`  -> `get “/users"`
*  `Users::Show`  -> `get “/users/:id"`
*  `Users::New`  -> `get “/users/new"`
*  `Users::Create`  -> `post “/users"`
*  `Users::Edit`  -> `get “/users/:id/edit"`
*  `Users::Update`  -> `put “/users/:id"`
*  `Users::Delete`  -> `delete “/users/:id"`
* Multiple namespaces: `Api::V1::Users::Show`  -> `get “/api/v1/users/:id"`
* Multi-word namespace: `MyAdminSection::Users::Show`  -> `get “/my_admin_section/users/:id"`

For the `nested_action` macro:

*  `Projects::Users::Index`  -> `get “/projects/:project_id/users"`
*  `Projects::Users::Show`  -> `get “/projects/:project_id/users/:id"`
*  `Projects::Users::New`  -> `get “/projects/:project_id/users/new"`
*  `Projects::Users::Create`  -> `post “/projects/:project_id/users"`
*  `Projects::Users::Edit`  -> `get “/projects/:project_id/users/:id/edit"`
*  `Projects::Users::Update`  -> `put “/projects/:project_id/users/:id"`
*  `Projects::Users::Delete`  -> `delete “/projects/:project_id/users/:id"`
* Multiple namespaces: `Api::V1::Projects::Users::Show`  -> `get “/api/v1/projects/:project_id/users/:id"`
* Multi-word namespace: `MyAdminSection::Projects::Users::Show`  -> `get “/my_admin_section/projects/:project_id/users/:id"`

## Path and route helpers

Lucky automatically generates some helpers for generating links.

You can access them as class methods on the action itself. They are:

* `route` - will return a `LuckyWeb::RouteHelper` object that contains both the path, and the method HTTP method
* `path` - will return a string

```crystal
class Projects::Users::Index < BaseAction
  # Normally you would use `nested_action` but we're using `get` to make the example more clear
  get "projects/:project_id/users" do
    render_text "Users"
  end
end
```

You can then call these methods

* `Projects::Users::Index.path(“my_project_id”)` and it will return -> `”/projects/my_project_id/users”`
* `Projects::Users::Index.route(“my_project_id”)` and it will return a `LuckyWeb::Response` whose `#path` method returns `”/projects/my_project_id/users”` and `#method` method return `”GET”`

We’ll talk about this more in the Pages guide. You can use the route helper with links and form to automatically set the path *and* HTTP method at the same time

## Redirecting

You can redirect using the `redirect` method

```crystal
class Users::Create < BaseAction
  action do
    redirect to: "/somewhere_else" # Default status is 302
    redirect to: "/somewhere_else, status: 301 # Override status
  end
end
```
